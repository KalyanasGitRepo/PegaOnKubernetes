---
global:
  # This values.yaml file is an example.  For more information about
  # each configuration option, see the project readme.

  # Enter your Kubernetes provider.
  provider: "k8s"

  deployment:
    # The name specified will be used to prefix all of the Pega pods (replacing "pega" with something like "app1-dev").
    name: "pega-app1-dev"

  # Deploy Pega nodes
  actions:
    execute: "deploy"

  # Add custom certificates to be mounted to container
  # to support custom certificates as plain text (less secure), pass them directly using the certificates parameter;
  # to support multiple custom certificates as external secrets, specify each of your external secrets
  # as an array of comma-separated strings using the certificatesSecrets parameter.
  certificatesSecrets: []
  certificates:

  # Provide JDBC connection information to the Pega relational database
  #   If you are installing or upgrading on IBM DB2, update the udb.conf file in the /charts/pega/charts/installer/config/udb directory with any additional connection properties.
  jdbc:
    #   url	Valid values are:
    #
    #   Oracle              jdbc:oracle:thin:@//localhost:1521/dbName
    #   IBM DB/2 z / OS 	jdbc:db2://localhost:50000/dbNamesssss
    #   IBM DB/2            jdbc:db2://localhost:50000/dbName:fullyMaterializeLobData=true;fullyMaterializeInputStreams=true;
    #                       progressiveStreaming=2;useJDBC4ColumnNameAndLabelSemantics=2;
    #   SQL Server          jdbc:sqlserver://localhost:1433;databaseName=dbName;selectMethod=cursor;sendStringParametersAsUnicode=false
    #   PostgreSQL          jdbc:postgresql://localhost:5432/dbName
    # minikube ssh 'grep host.minikube.internal /etc/hosts | cut -f1'
    url: jdbc:postgresql://192.168.65.2:5432/pegadb
    #   driverClass 	-- jdbc class.  Valid values are:
    #
    #   Oracle              oracle.jdbc.OracleDriver
    #   IBM DB/2            com.ibm.db2.jcc.DB2Driver
    #   SQL Server          com.microsoft.sqlserver.jdbc.SQLServerDriver
    #   PostgreSQL          org.postgresql.Driver
    driverClass: org.postgresql.Driver
    #   pega.database.type	Valid values are: mssql, oracledate, udb, db2zos, postgres
    dbType: "postgres"
    #   For databases that use multiple JDBC driver files (such as DB2), specify comma separated values for 'driverUri'
    driverUri: "https://jdbc.postgresql.org/download/postgresql-42.5.0.jar"
    username: "base-user"
    password: "postgres"
    # To avoid exposing a password, leave the jdbc.password parameter empty (no quotes), configure a JDBC password
    # in the External Secrets Manager, and enter the external secret for the JDBC password.
    #external_secret_name: ""
    # CUSTOM CONNECTION PROPERTIES
    # Add a list of ; delimited connections properties. The list must end with ;
    # For example: connectionProperties=user=usr;password=pwd;
    connectionProperties: ""
    rulesSchema: "rules"
    dataSchema: "data"
    customerDataSchema: ""

  customArtifactory:
    # If you use a secured custom artifactory to manager your JDBC driver,
    # provide the authentication details below by filling in the appropriate authentication section,
    # either basic or apiKey.
    authentication:
      # Provide the basic authentication credentials or the API key authentication details to satisfy your custom artifactory authentication mechanism.
      basic:
        username: "YOUR_ARTIFACTORY_USERNAME"
        password: "YOUR_ARTIFACTORY_PASSWORD"
      apiKey:
        headerName: "YOUR_ARTIFACTORY_DEDICATED_APIKEY_HEADER"
        value: "YOUR_ARTIFACTORY_API_KEY"
    # Leave customArtifactory.enableSSLVerification enabled to ensure secure access to your custom artifactory;
    # when customArtifactory.enableSSLVerification is false, SSL verification is skipped and establishes an insecure connection.
    enableSSLVerification: true
    # Provide a required domain certificate for your custom artifactory; if none is required, leave this field blank.
    certificate:

  docker:
    # If using a custom Docker registry, supply the credentials here to pull Docker images.
    registry:
      url: "YOUR_DOCKER_REGISTRY"
      username: "YOUR_DOCKER_REGISTRY_USERNAME"
      password: "YOUR_DOCKER_REGISTRY_PASSWORD"
    # Docker image information for the Pega docker image, containing the application server.
    pega:
      image: "kalyanalakkamraju/my-pega:8.7.0"

  utilityImages:
    busybox:
      image: busybox:1.31.0
      imagePullPolicy: IfNotPresent
    k8s_wait_for:
      image: dcasavant/k8s-wait-for
      imagePullPolicy: "IfNotPresent"

  # Specify the Pega tiers to deploy
  # For a minimal deployment, use a single tier to reduce resource consumption.
  tier:
    - name: "minikube"
      nodeType: "Stream,BackgroundProcessing,WebUser,Search"
      livenessProbe:
        initialDelaySeconds: 120
        timeoutSeconds: 300
        failureThreshold: 300
      
      readinessProbe:
        initialDelaySeconds: 120
        timeoutSeconds: 300
        failureThreshold: 300
        
      startupProbe:
        initialDelaySeconds: 120
        timeoutSeconds: 300
        failureThreshold: 300
        
      service:
        port: 8080
        targetPort: 8080
        # Without a load balancer, use a direct NodePort instead.
        serviceType: "NodePort"
        # To configure TLS between the ingress/load balancer and the backend, set the following:
        tls:
          enabled: false
          # To avoid entering the certificate values in plain text, configure the keystore, keystorepassword, cacertificate parameter
          # values in the External Secrets Manager, and enter the external secret name below
          # make sure the keys in the secret should be TOMCAT_KEYSTORE_CONTENT, TOMCAT_KEYSTORE_PASSWORD and ca.crt respectively
          external_secret_name: ""
          keystore:
          keystorepassword:
          port: 443
          targetPort: 8443
          # set the value of CA certificate here in case of baremetal/openshift deployments - CA certificate should be in base64 format
          cacertificate:
          # set enabled=true, only if addon chart is deployed and traefik is enabled
          traefik:
            enabled: false
            # the SAN of the certificate present inside the container
            serverName: ""
            # set insecureSkipVerify=true, if the certificate verification has to be skipped
            insecureSkipVerify: false

      ingress:
        # Enter the domain name to access web nodes via a load balancer.
        #  e.g. web.mypega.example.com
        domain: "k8s.mypega.com"

      # Set resource consumption to minimal levels
      replicas: 1
      cpuRequest: 200m
      memRequest: "6Gi"
      cpuLimit: 2
      memLimit: "6Gi"
      javaOpts: ""
      initialHeap: "4096m"
      maxHeap: "4096m"
      pegaDiagnosticUser: ""
      pegaDiagnosticPassword: ""
      volumeClaimTemplate:
        resources:
          requests:
            storage: 5Gi

# External services

# Cassandra automatic deployment settings.
# Disabled by default for minimal deployments.
cassandra:
  enabled: false

# DDS (external Cassandra) connection settings.
# These settings should only be modified if you are using a custom Cassandra deployment.
dds:
  externalNodes: ""
  port: "9042"
  username: "dnode_ext"
  password: "dnode_ext"

# Elasticsearch deployment settings.
# Note: This Elasticsearch deployment is used for Pega search, and is not the same Elasticsearch deployment used by the EFK stack.
# These search nodes will be deployed regardless of the Elasticsearch configuration above.
# Refer to README document to configure `Search and Reporting Service` as a search functionality provider under this section.
pegasearch:
  image: "pegasystems/search"
  memLimit: "3Gi"

# Pega Installer settings
installer:
  image: "kalyanalakkamraju/my-pega-installer:8.7.0"
  adminPassword: "postgres"

# Hazelcast settings (applicable from Pega 8.6)
hazelcast:
  image: "kalyanalakkamraju/my-pega-clustering-service:1.0.3"
  # Setting below to true will deploy the infinity in client-server Hazelcast model.
  # Note: Make sure to set this value as "false" in case of platform version below "8.6". If not set this will fail the installation.
  enabled: true
  # No. of initial members to join
  replicas: 3
  # UserName to be used in client-server Hazelcast model for authentication
  username: "username"
  # Password to be used in client-server Hazelcast model for authentication
  password: "password"